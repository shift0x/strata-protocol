script {
    use std::string;
    use std::signer;
    use std::debug;
    use std::timestamp;
    use std::vector;
    use marketplace::volatility_marketplace::{Self};
    use marketplace::implied_volatility_market::{Self};

    const ONE_E6 : u64 = 1000000;
    const ONE_E18 : u256 = 1000000000000000000;

    fun reset_reserves(
        sender: &signer
    ) {
        let sender_address = signer::address_of(sender);

        // create the volatility marketplace
        let marketplace_address = @0x72ea4f78a4bedea97d0a1a67d48543372e35b681745982764ae68b9ce249a06d;
        let symbols = vector::empty<string::String>();
        vector::push_back(&mut symbols, string::utf8(b"ETH-USD"));
        vector::push_back(&mut symbols, string::utf8(b"BTC-USD"));
        vector::push_back(&mut symbols, string::utf8(b"APT-USD"));

        let markets = volatility_marketplace::get_active_markets(marketplace_address, symbols);
        let market_count = vector::length(&markets);

        let i = 0;
        while (i < market_count) {
            let market = vector::borrow(&markets, i);
            let market_address = volatility_marketplace::get_market_address_from_metadata(market);

            implied_volatility_market::reset_reserves(market_address);
            i = i + 1;
        };
    }
}
